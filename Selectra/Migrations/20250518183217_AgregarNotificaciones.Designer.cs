// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Selectra.Models;

#nullable disable

namespace Selectra.Migrations
{
    [DbContext(typeof(SelectraContext))]
    [Migration("20250518183217_AgregarNotificaciones")]
    partial class AgregarNotificaciones
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Selectra.Models.Area", b =>
                {
                    b.Property<int>("areaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("areaId"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombreArea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("areaId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Selectra.Models.Cargo", b =>
                {
                    b.Property<int>("cargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cargoId"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombreCargo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("cargoId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Selectra.Models.DatosPersonales", b =>
                {
                    b.Property<int>("datosPersonalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("datosPersonalesId"));

                    b.Property<string>("apellidoMaterno")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("apellidoPaterno")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("emailPersonal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombres")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("numeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("tipoDocumentoId")
                        .HasColumnType("int");

                    b.Property<string>("ubigeoNacimiento")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("ubigeoResidencia")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("datosPersonalesId");

                    b.HasIndex("tipoDocumentoId");

                    b.ToTable("DatosPersonales");
                });

            modelBuilder.Entity("Selectra.Models.EstadoHistorialAprobacion", b =>
                {
                    b.Property<int>("estadoHistorialAprobacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("estadoHistorialAprobacionId"));

                    b.Property<string>("codigoEstado")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("nombreEstado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("estadoHistorialAprobacionId");

                    b.ToTable("EstadosHistorialAprobaciones");
                });

            modelBuilder.Entity("Selectra.Models.EstadoOfertaLaboral", b =>
                {
                    b.Property<int>("estadoOfertaLaboralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("estadoOfertaLaboralId"));

                    b.Property<string>("codigoEstado")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("esEditable")
                        .HasColumnType("bit");

                    b.Property<bool>("esPublica")
                        .HasColumnType("bit");

                    b.Property<string>("nombreEstado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("estadoOfertaLaboralId");

                    b.ToTable("EstadosOfertaLaborales");
                });

            modelBuilder.Entity("Selectra.Models.EstadoPostulante", b =>
                {
                    b.Property<int>("estadoPostulanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("estadoPostulanteId"));

                    b.Property<string>("codigoEstado")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("esEstadoContratacion")
                        .HasColumnType("bit");

                    b.Property<bool>("esEstadoRechazo")
                        .HasColumnType("bit");

                    b.Property<string>("nombreEstado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("estadoPostulanteId");

                    b.ToTable("EstadosPostulantes");
                });

            modelBuilder.Entity("Selectra.Models.EstadoRequerimiento", b =>
                {
                    b.Property<int>("estadoRequerimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("estadoRequerimientoId"));

                    b.Property<string>("codigoEstado")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("esEstadoFinal")
                        .HasColumnType("bit");

                    b.Property<bool>("esEstadoInicial")
                        .HasColumnType("bit");

                    b.Property<string>("nombreEstado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("estadoRequerimientoId");

                    b.ToTable("EstadosRequerimientos");
                });

            modelBuilder.Entity("Selectra.Models.HistorialAprobacion", b =>
                {
                    b.Property<int>("historialAprobacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("historialAprobacionId"));

                    b.Property<int>("aprobadorId")
                        .HasColumnType("int");

                    b.Property<int>("estadoHistorialAprobacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fechaDecision")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ordenAprobacionId")
                        .HasColumnType("int");

                    b.Property<int>("requerimientoId")
                        .HasColumnType("int");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("historialAprobacionId");

                    b.HasIndex("aprobadorId");

                    b.HasIndex("estadoHistorialAprobacionId");

                    b.HasIndex("ordenAprobacionId");

                    b.HasIndex("requerimientoId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("HistorialAprobaciones");
                });

            modelBuilder.Entity("Selectra.Models.NotificacionesUsuarios", b =>
                {
                    b.Property<int>("notificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notificacionId"));

                    b.Property<bool>("estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("leida")
                        .HasColumnType("bit");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mensaje")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("notificacionId");

                    b.HasIndex("usuarioId");

                    b.ToTable("notificacionesUsuarios");
                });

            modelBuilder.Entity("Selectra.Models.OfertaLaboral", b =>
                {
                    b.Property<int>("ofertaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ofertaId"));

                    b.Property<int>("areaId")
                        .HasColumnType("int");

                    b.Property<string>("beneficios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cargoId")
                        .HasColumnType("int");

                    b.Property<string>("competencias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccionTrabajo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("estadoOfertaLaboralId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("fechaCierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fechaEstimadaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("funciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("referenciaUbicacion")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("requerimientoId")
                        .HasColumnType("int");

                    b.Property<int>("responsableId")
                        .HasColumnType("int");

                    b.Property<decimal?>("sueldoOfrecido")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("ofertaId");

                    b.HasIndex("areaId");

                    b.HasIndex("cargoId");

                    b.HasIndex("estadoOfertaLaboralId");

                    b.HasIndex("requerimientoId");

                    b.HasIndex("responsableId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("OfertasLaborales");
                });

            modelBuilder.Entity("Selectra.Models.OpcionPreguntaFiltro", b =>
                {
                    b.Property<int>("opcionPreguntaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("opcionPreguntaId"));

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<int?>("orden")
                        .HasColumnType("int");

                    b.Property<int>("preguntaFiltroId")
                        .HasColumnType("int");

                    b.Property<string>("textoOpcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("opcionPreguntaId");

                    b.HasIndex("preguntaFiltroId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("OpcionPreguntaFiltro");
                });

            modelBuilder.Entity("Selectra.Models.OrdenAprobacion", b =>
                {
                    b.Property<int>("ordenAprobacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ordenAprobacionId"));

                    b.Property<string>("descripcionPaso")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<int>("orden")
                        .HasColumnType("int");

                    b.Property<int>("rolAprobadorId")
                        .HasColumnType("int");

                    b.Property<int>("tipoRequerimientoId")
                        .HasColumnType("int");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("ordenAprobacionId");

                    b.HasIndex("rolAprobadorId");

                    b.HasIndex("tipoRequerimientoId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("OrdenesAprobaciones");
                });

            modelBuilder.Entity("Selectra.Models.Personal", b =>
                {
                    b.Property<int>("personalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("personalId"));

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<int>("areaId")
                        .HasColumnType("int");

                    b.Property<int>("cargoId")
                        .HasColumnType("int");

                    b.Property<int>("datosPersonalesId")
                        .HasColumnType("int");

                    b.Property<string>("emailCorporativo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("fechaIngresoCompania")
                        .HasColumnType("datetime2");

                    b.Property<int?>("jefeDirectoId")
                        .HasColumnType("int");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("personalId");

                    b.HasIndex("areaId");

                    b.HasIndex("cargoId");

                    b.HasIndex("datosPersonalesId");

                    b.HasIndex("jefeDirectoId");

                    b.HasIndex("usuarioId");

                    b.ToTable("Personales");
                });

            modelBuilder.Entity("Selectra.Models.Postulante", b =>
                {
                    b.Property<int>("postulanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("postulanteId"));

                    b.Property<string>("cvPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("estadoPostulanteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaPostulacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("fuenteReclutamiento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("nombreCompleto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("numeroDocumento")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ofertaId")
                        .HasColumnType("int");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("tipoDocumento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("postulanteId");

                    b.HasIndex("estadoPostulanteId");

                    b.HasIndex("ofertaId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("Postulantes");
                });

            modelBuilder.Entity("Selectra.Models.PreguntaFiltro", b =>
                {
                    b.Property<int>("preguntaFiltroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("preguntaFiltroId"));

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<bool>("obligatoria")
                        .HasColumnType("bit");

                    b.Property<int>("ofertaId")
                        .HasColumnType("int");

                    b.Property<string>("textoPregunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipoPreguntaId")
                        .HasColumnType("int");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("preguntaFiltroId");

                    b.HasIndex("ofertaId");

                    b.HasIndex("tipoPreguntaId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("PreguntasFiltros");
                });

            modelBuilder.Entity("Selectra.Models.RequerimientoPersonal", b =>
                {
                    b.Property<int>("requerimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("requerimientoId"));

                    b.Property<int>("areaId")
                        .HasColumnType("int");

                    b.Property<int>("cargoId")
                        .HasColumnType("int");

                    b.Property<int>("estadoRequerimientoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fechaDeseadaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fechaFinProceso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<int?>("jefeDestinoId")
                        .HasColumnType("int");

                    b.Property<string>("motivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("solicitanteId")
                        .HasColumnType("int");

                    b.Property<decimal?>("sueldoPropuesto")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("tipoRequerimientoId")
                        .HasColumnType("int");

                    b.Property<string>("tituloRequerimiento")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("requerimientoId");

                    b.HasIndex("areaId");

                    b.HasIndex("cargoId");

                    b.HasIndex("estadoRequerimientoId");

                    b.HasIndex("jefeDestinoId");

                    b.HasIndex("solicitanteId");

                    b.HasIndex("tipoRequerimientoId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("RequerimientosPersonales");
                });

            modelBuilder.Entity("Selectra.Models.RespuestaPostulante", b =>
                {
                    b.Property<int>("respuestaPostulanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("respuestaPostulanteId"));

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<int>("postulanteId")
                        .HasColumnType("int");

                    b.Property<int>("preguntaFiltroId")
                        .HasColumnType("int");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.Property<string>("valorRespuesta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("respuestaPostulanteId");

                    b.HasIndex("postulanteId");

                    b.HasIndex("preguntaFiltroId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("RespuestasPostulantes");
                });

            modelBuilder.Entity("Selectra.Models.Rol", b =>
                {
                    b.Property<int>("rolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rolId"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<int?>("nivel")
                        .HasColumnType("int");

                    b.Property<string>("nombreRol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("rolId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Selectra.Models.TipoDocumento", b =>
                {
                    b.Property<int>("tipoDocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tipoDocumentoId"));

                    b.Property<string>("nombreTipoDocumento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("tipoDocumentoId");

                    b.ToTable("TiposDocumentos");
                });

            modelBuilder.Entity("Selectra.Models.TipoPreguntasFiltro", b =>
                {
                    b.Property<int>("tipoPreguntaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tipoPreguntaId"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("tipoPreguntaId");

                    b.ToTable("TipoPreguntasFiltro");
                });

            modelBuilder.Entity("Selectra.Models.TiposRequerimiento", b =>
                {
                    b.Property<int>("tipoRequerimientoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tipoRequerimientoId"));

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("tipoRequerimientoId");

                    b.HasIndex("usuarioUltModId");

                    b.ToTable("TiposRequerimientos");
                });

            modelBuilder.Entity("Selectra.Models.Usuario", b =>
                {
                    b.Property<int>("usuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("usuarioId"));

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<string>("claveHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("codUsuario")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("fechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fechaUltMod")
                        .HasColumnType("datetime2");

                    b.Property<int>("rolId")
                        .HasColumnType("int");

                    b.Property<int?>("usuarioUltModId")
                        .HasColumnType("int");

                    b.HasKey("usuarioId");

                    b.HasIndex("rolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Selectra.Models.DatosPersonales", b =>
                {
                    b.HasOne("Selectra.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("tipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Selectra.Models.HistorialAprobacion", b =>
                {
                    b.HasOne("Selectra.Models.Personal", "Aprobador")
                        .WithMany("AprobacionesRealizadas")
                        .HasForeignKey("aprobadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.EstadoHistorialAprobacion", "EstadoHistorialAprobacion")
                        .WithMany()
                        .HasForeignKey("estadoHistorialAprobacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.OrdenAprobacion", "OrdenAprobacion")
                        .WithMany("HistorialAprobaciones")
                        .HasForeignKey("ordenAprobacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.RequerimientoPersonal", "RequerimientoPersonal")
                        .WithMany("HistorialAprobaciones")
                        .HasForeignKey("requerimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("Aprobador");

                    b.Navigation("EstadoHistorialAprobacion");

                    b.Navigation("OrdenAprobacion");

                    b.Navigation("RequerimientoPersonal");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.NotificacionesUsuarios", b =>
                {
                    b.HasOne("Selectra.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Selectra.Models.OfertaLaboral", b =>
                {
                    b.HasOne("Selectra.Models.Area", "Area")
                        .WithMany("OfertasEnArea")
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("cargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.EstadoOfertaLaboral", "EstadoOfertaLaboral")
                        .WithMany()
                        .HasForeignKey("estadoOfertaLaboralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.RequerimientoPersonal", "RequerimientoPersonal")
                        .WithMany("OfertasLaborales")
                        .HasForeignKey("requerimientoId");

                    b.HasOne("Selectra.Models.Personal", "Responsable")
                        .WithMany("OfertasResponsable")
                        .HasForeignKey("responsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("Area");

                    b.Navigation("Cargo");

                    b.Navigation("EstadoOfertaLaboral");

                    b.Navigation("RequerimientoPersonal");

                    b.Navigation("Responsable");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.OpcionPreguntaFiltro", b =>
                {
                    b.HasOne("Selectra.Models.PreguntaFiltro", "PreguntaFiltro")
                        .WithMany("OpcionesPregunta")
                        .HasForeignKey("preguntaFiltroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("PreguntaFiltro");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.OrdenAprobacion", b =>
                {
                    b.HasOne("Selectra.Models.Rol", "RolAprobador")
                        .WithMany()
                        .HasForeignKey("rolAprobadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.TiposRequerimiento", "TipoRequerimiento")
                        .WithMany("OrdenesAprobacion")
                        .HasForeignKey("tipoRequerimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("RolAprobador");

                    b.Navigation("TipoRequerimiento");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.Personal", b =>
                {
                    b.HasOne("Selectra.Models.Area", "Area")
                        .WithMany("PersonalEnArea")
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("cargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.DatosPersonales", "DatosPersonales")
                        .WithMany()
                        .HasForeignKey("datosPersonalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Personal", "JefeDirecto")
                        .WithMany("Subordinados")
                        .HasForeignKey("jefeDirectoId");

                    b.HasOne("Selectra.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Cargo");

                    b.Navigation("DatosPersonales");

                    b.Navigation("JefeDirecto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Selectra.Models.Postulante", b =>
                {
                    b.HasOne("Selectra.Models.EstadoPostulante", "EstadoPostulante")
                        .WithMany()
                        .HasForeignKey("estadoPostulanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.OfertaLaboral", "OfertaLaboral")
                        .WithMany("Postulantes")
                        .HasForeignKey("ofertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("EstadoPostulante");

                    b.Navigation("OfertaLaboral");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.PreguntaFiltro", b =>
                {
                    b.HasOne("Selectra.Models.OfertaLaboral", "OfertaLaboral")
                        .WithMany("PreguntasFiltro")
                        .HasForeignKey("ofertaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.TipoPreguntasFiltro", "TipoPreguntasFiltro")
                        .WithMany("PreguntasFiltro")
                        .HasForeignKey("tipoPreguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("OfertaLaboral");

                    b.Navigation("TipoPreguntasFiltro");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.RequerimientoPersonal", b =>
                {
                    b.HasOne("Selectra.Models.Area", "AreaDestino")
                        .WithMany("RequerimientosEnArea")
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Cargo", "CargoSolicitado")
                        .WithMany()
                        .HasForeignKey("cargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.EstadoRequerimiento", "EstadoRequerimiento")
                        .WithMany()
                        .HasForeignKey("estadoRequerimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Personal", "JefeDestino")
                        .WithMany("RequerimientosComoJefeDestino")
                        .HasForeignKey("jefeDestinoId");

                    b.HasOne("Selectra.Models.Personal", "Solicitante")
                        .WithMany("RequerimientosSolicitados")
                        .HasForeignKey("solicitanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.TiposRequerimiento", "TipoRequerimiento")
                        .WithMany("RequerimientosPersonales")
                        .HasForeignKey("tipoRequerimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("AreaDestino");

                    b.Navigation("CargoSolicitado");

                    b.Navigation("EstadoRequerimiento");

                    b.Navigation("JefeDestino");

                    b.Navigation("Solicitante");

                    b.Navigation("TipoRequerimiento");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.RespuestaPostulante", b =>
                {
                    b.HasOne("Selectra.Models.Postulante", "Postulante")
                        .WithMany("RespuestasPostulante")
                        .HasForeignKey("postulanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.PreguntaFiltro", "PreguntaFiltro")
                        .WithMany("RespuestasPostulantes")
                        .HasForeignKey("preguntaFiltroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("Postulante");

                    b.Navigation("PreguntaFiltro");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.TiposRequerimiento", b =>
                {
                    b.HasOne("Selectra.Models.Usuario", "UsuarioUltMod")
                        .WithMany()
                        .HasForeignKey("usuarioUltModId");

                    b.Navigation("UsuarioUltMod");
                });

            modelBuilder.Entity("Selectra.Models.Usuario", b =>
                {
                    b.HasOne("Selectra.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("rolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Selectra.Models.Area", b =>
                {
                    b.Navigation("OfertasEnArea");

                    b.Navigation("PersonalEnArea");

                    b.Navigation("RequerimientosEnArea");
                });

            modelBuilder.Entity("Selectra.Models.OfertaLaboral", b =>
                {
                    b.Navigation("Postulantes");

                    b.Navigation("PreguntasFiltro");
                });

            modelBuilder.Entity("Selectra.Models.OrdenAprobacion", b =>
                {
                    b.Navigation("HistorialAprobaciones");
                });

            modelBuilder.Entity("Selectra.Models.Personal", b =>
                {
                    b.Navigation("AprobacionesRealizadas");

                    b.Navigation("OfertasResponsable");

                    b.Navigation("RequerimientosComoJefeDestino");

                    b.Navigation("RequerimientosSolicitados");

                    b.Navigation("Subordinados");
                });

            modelBuilder.Entity("Selectra.Models.Postulante", b =>
                {
                    b.Navigation("RespuestasPostulante");
                });

            modelBuilder.Entity("Selectra.Models.PreguntaFiltro", b =>
                {
                    b.Navigation("OpcionesPregunta");

                    b.Navigation("RespuestasPostulantes");
                });

            modelBuilder.Entity("Selectra.Models.RequerimientoPersonal", b =>
                {
                    b.Navigation("HistorialAprobaciones");

                    b.Navigation("OfertasLaborales");
                });

            modelBuilder.Entity("Selectra.Models.TipoPreguntasFiltro", b =>
                {
                    b.Navigation("PreguntasFiltro");
                });

            modelBuilder.Entity("Selectra.Models.TiposRequerimiento", b =>
                {
                    b.Navigation("OrdenesAprobacion");

                    b.Navigation("RequerimientosPersonales");
                });
#pragma warning restore 612, 618
        }
    }
}
